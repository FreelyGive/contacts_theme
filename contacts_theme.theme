<?php

/**
 * @file
 * Functions to support theming in the contacts_theme theme.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\Html;

include 'includes/forms.theme.inc';
include 'includes/forms.inc';
include 'includes/widgets.inc';

/**
 * Implements hook_theme_suggestions_alter().
 */
function contacts_theme_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'page' && drupal_static('contacts_theme_dashboard')) {
    $suggestions[] = $hook . '__contacts_dashboard';
  }
}

function contacts_theme_js_settings_alter(array &$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  if (in_array('contacts/tabs', $assets->getLibraries())) {
    $settings['contacts']['tabs']['activeClass'] = 'active';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function contacts_theme_element_info_alter(array &$info) {
  // Use a pre-render to propagate form columns.
  $info['form']['#pre_render'][] = 'contacts_theme_form_propagate_columns';

  // Change the default date part order.
  $info['datelist']['#date_part_order'] = ['day', 'month', 'year', 'hour', 'minute'];

  // Prevent the composite fieldset.
  $info['radios']['#pre_render'] = ['contacts_theme_composite_pre_render'];
  $info['radios']['#theme_wrappers'][] = 'form_element';
  $info['checkboxes']['#pre_render'] = ['contacts_theme_composite_pre_render'];
  $info['checkboxes']['#theme_wrappers'][] = 'form_element';

  // Add a preprocess for actions.
  $info['actions']['#pre_render'][] = 'contacts_theme_pre_render_actions';
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 *
 * @todo: Replace with an SVG logo.
 */
function contacts_theme_preprocess_page(array &$variables) {
  $path = drupal_get_path('theme', 'contacts_theme');
  $logo = theme_get_setting('logo.url');
  if ($logo == file_url_transform_relative(file_create_url($path . '/logo.svg'))) {
    $variables['logo'] = file_url_transform_relative(file_create_url($path . '/logo.png'));
  }

  // See if we have a header image.
  $variables['header_image'] = contacts_theme_header_image();
  if ($variables['header_image']) {
    $variables['attributes']['class'][] = 'contacts-with-header-image';
  }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function contacts_theme_preprocess_block(&$variables) {
  // Add classes to specific blocks for styling.
  $classes = [
    'views_exposed_filter_block:contacts_dashboard_indexed-full' => ['highlight'],
    'contacts_back' => ['highlight'],
  ];
  if (isset($classes[$variables['plugin_id']])) {
    if (!isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = $classes[$variables['plugin_id']];
    }
    else {
      $variables['attributes']['class'] = array_merge($variables['attributes']['class'], $classes[$variables['plugin_id']]);
    }
  }

  if ($variables['plugin_id'] == 'local_actions_block') {
    $keys = [
      'contacts.contact_create_group',
      'contacts.contact_configure_group',
    ];
    foreach ($variables['content'] as $key => &$content) {
      if (in_array($key, $keys)) {
        $content['button']['#value'] = '';
        $content['button']['#attributes']['class'][] = 'button-action-icon';
      }
    }
  }
  elseif ($variables['base_plugin_id'] == 'views_block') {
    if ($variables['elements']['#base_plugin_id'] == 'views_block') {
      $view_classes = explode(' ', $variables['elements']['content']['#view']->display_handler->getOption('css_class'));
      if (in_array('view-fill-scroll', $view_classes)) {
        $variables['attributes']['class'][] = 'd-flex';
        $variables['attributes']['class'][] = 'flex-fill-scroll';
        unset($variables['content']['#theme_wrappers']);
      }
    }
  }
  elseif ($variables['plugin_id'] == 'contacts_back') {
    $pos = array_search('button', $variables['content']['#options']['attributes']['class']);
    if ($pos !== FALSE) {
      unset($variables['content']['#options']['attributes']['class'][$pos]);
    }
    $variables['content']['#options']['attributes']['class'][] = 'btn';
    $variables['content']['#options']['attributes']['class'][] = 'btn-secondary';
  }
}

/**
 * Implements hook_preprocess_HOOK() for the contacts_dashboard layout.
 */
function contacts_theme_preprocess_contacts_dashboard(array &$variables) {
  $in_dashboard_page = &drupal_static('contacts_theme_dashboard');
  $in_dashboard_page = TRUE;

  foreach (Element::children($variables['content']) as $region) {
    unset($variables['content'][$region]['#prefix']);
    unset($variables['content'][$region]['#suffix']);
  }
}

function contacts_theme_preprocess_contacts_dash_summary(array $variables) {
  contacts_theme_header_image($variables['image']);
}

/**
 * Get/set the header image.
 *
 * @param array|NULL $content
 *   The render array for the header image if setting.
 *
 * @return array|NULL
 *   The render array for the header image or NULL if there is none.
 */
function contacts_theme_header_image(array $content = NULL) {
  $image = &drupal_static('contacts_theme_header_image');
  if ($content) {
    $image = $content;
  }
  return $image;
}

/**
 * Implements hook_preprocess_HOOK() for page.
 *
 * @see \template_preprocess_pager()
 */
function contacts_theme_preprocess_pager(&$variables) {
  foreach ($variables['items'] as $key => &$item) {
    if ($key == 'pages') {
      foreach ($item as &$page_item) {
        $page_item['attributes'] = new Attribute(['class' => ['page-link']]);
      }
    }
    else {
      $item['attributes'] = new Attribute(['class' => ['page-link']]);
    }
  }
}

/**
 * Act on the view immediately before rendering it.
 *
 * At this point the query has been executed, and the preRender() phase has
 * already happened for handlers, so all data should be available. This hook
 * can be used by themes.
 *
 * Output can be added to the view by setting $view->attachment_before
 * and $view->attachment_after.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view object about to be processed.
 *
 * @see \Drupal\views\ViewExecutable
 */
function contacts_theme_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'contacts_dashboard_indexed') {
    $view->display_handler->setOption('css_class', 'view-fill-scroll');
    if (isset($view->header['result'])) {
      $view->header['result']->options['content'] = '<div class="view-result-header">' . $view->header['result']->options['content'] . '</div>';
    }
  }

  $css_class = Html::getClass('views-view-' . $view->id()) . ' ' . $view->display_handler->getOption('css_class');
  $view->display_handler->setOption('css_class', $css_class);
}

function contacts_theme_preprocess_contacts_dash_tabs(&$variables) {
  $variables['attributes']['class'][] = 'nav';
  $variables['attributes']['class'][] = 'nav-tabs';
  foreach ($variables['tabs'] as &$tab) {
    $tab['attributes']->addClass('nav-item');
    $tab['link_attributes']->addClass('nav-link');
    if ($tab['attributes']->hasClass('is-active')) {
      $tab['attributes']->removeClass('is-active');
      $tab['link_attributes']->addClass('active');
      $tab['link_attributes']->removeClass('is-active');
    }
  }
}
